#!/usr/bin/ruby -w

require "../libs/initialization.rb"
require "../libs/communication.rb"
require "../libs/chain_monitor.rb"
require "mongo"
require "thor"

$VERBOSE = nil

Mongo::Logger.logger.level = Logger::FATAL

def pubkey_to_privkey(pubkey)
  @client = Mongo::Client.new(["127.0.0.1:27017"], :database => "GPC")
  @db = @client.database
  @coll_sessions = @db[pubkey + "_session_pool"]
  private_key = @coll_sessions.find({ id: 0 }).first[:privkey]
  return private_key
end

class GPCCLI < Thor
  desc "init <private-key>", "Init with the private key."

  # --------------init
  def init(private_key)
    if ARGV.length != 2
      puts "The arg number is not right."
      return false
    end
    Init.new(private_key)
  end

  # --------------listen
  desc "listen <pubkey> <port>", "Listen the port."

  def listen(pubkey, port = 1000)
    if ARGV.length != 3
      puts "The arg number is not right."
      return false
    end
    private_key = pubkey_to_privkey(pubkey)
    communicator = Communication.new(private_key)
    communicator.listen(port)
  end

  # --------------establishment
  desc "send_establishment_request --pubkey <public key> --ip <ip> \
        --port <port> --amount <amount> --since <since> \
        --type_code_hash <type code hash> --type_args <type_args> \
        --type_hash_type <type_hash_type> --type_tx_hash <type_tx_hash> \
        --index <index> --dep_type <dep_type>",
       "Send the chanenl establishment request."
  option :pubkey, :required => true
  option :ip, :required => true
  option :port, :required => true
  option :amount, :required => true
  option :since, :required => true
  option :type_code_hash
  option :type_args
  option :type_hash_type
  option :type_tx_hash
  option :index
  option :dep_type

  def send_establishment_request()
    private_key = pubkey_to_privkey(options[:pubkey])
    communicator = Communication.new(private_key)
    type_hash_type = options[:type_hash_type] == "data" ? CKB::ScriptHashType::DATA : CKB::ScriptHashType::TYPE
    type_script = CKB::Types::Script.new(code_hash: options[:type_code_hash],
                                         args: options[:type_args],
                                         hash_type: type_hash_type)

    out_point = CKB::Types::OutPoint.new(
      tx_hash: options[:type_tx_hash],
      index: options[:index].to_i,
    )
    type_dep = CKB::Types::CellDep.new(out_point: out_point, dep_type: options[:dep_type])

    communicator.send_establish_channel(options[:ip], options[:port], options[:amount].to_i,
                                        options[:since], type_script, type_dep)
  end

  # --------------make payments
  desc "make_payment --pubkey <public key> --ip <ip> --port <port> --id <id> --amount <amount> ", "Make payments"

  option :pubkey, :required => true
  option :ip, :required => true
  option :port, :required => true
  option :id, :required => true
  option :amount, :required => true

  def make_payment()
    # if ARGV.length != 11
    #   puts "The arg number is not right."
    #   return false
    # end
    private_key = pubkey_to_privkey(options[:pubkey])
    communicator = Communication.new(private_key)
    communicator.send_payments(options[:ip], options[:port], options[:id], options[:amount].to_i)
  end

  # --------------monitor
  desc "monitor <public key>", "Monitor the chain."

  def monitor(pubkey)
    # if ARGV.length != 2
    #   puts "The arg number is not right."
    #   return false
    # end
    private_key = pubkey_to_privkey(pubkey)
    monitor = Minotor.new(private_key)
    monitor.monitor_chain()
  end

  desc "closing_channel <pubkey> <id>", "closing the channel with id."

  def closing_channel(pubkey, id)
    private_key = pubkey_to_privkey(pubkey)
    monitor = Minotor.new(private_key)

    @client = Mongo::Client.new(["127.0.0.1:27017"], :database => "GPC")
    @db = @client.database
    @coll_sessions = @db[pubkey + "_session_pool"]

    doc = @coll_sessions.find({ id: id }).first
    monitor.send_tx(doc, "closing")
  end

  desc "send_closing_request --pubkey <public key> --ip <ip> --port <port> --id <id>", "The good case, bilateral closing."

  option :pubkey, :required => true
  option :ip, :required => true
  option :port, :required => true
  option :id, :required => true
  option :fee

  def send_closing_request()
    private_key = pubkey_to_privkey(options[:pubkey])
    communicator = Communication.new(private_key)
    communicator.send_closing_request(options[:ip], options[:port], options[:id], options[:fee]) if options[:fee]
    communicator.send_closing_request(options[:ip], options[:port], options[:id]) if !options[:fee]
  end
end

GPCCLI.start(ARGV)
